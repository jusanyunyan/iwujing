<?php
// +----------------------------------------------------------------------
// | OneThink [ WE CAN DO IT JUST THINK IT ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013 http://www.onethink.cn All rights reserved.
// +----------------------------------------------------------------------
// | Author: 麦当苗儿 <zuojiazi@vip.qq.com> <http://www.zjzit.cn>
// +----------------------------------------------------------------------

/**
 * 后台公共文件
 * 主要定义后台公共函数库
 */

/* 解析列表定义规则*/

function get_list_field($data, $grid,$model){

	// 获取当前字段数据
    foreach($grid['field'] as $field){
        $array  =   explode('|',$field);
        $temp  =	$data[$array[0]];
        // 函数支持
        if(isset($array[1])){
            $temp = call_user_func($array[1], $temp);
        }
        $data2[$array[0]]    =   $temp;
    }
    if(!empty($grid['format'])){
        $value  =   preg_replace_callback('/\[([a-z_]+)\]/', function($match) use($data2){return $data2[$match[1]];}, $grid['format']);
    }else{
        $value  =   implode(' ',$data2);
    }

	// 链接支持
	if(!empty($grid['href'])){
		$links  =   explode(',',$grid['href']);
        foreach($links as $link){
            $array  =   explode('|',$link);
            $href   =   $array[0];
            if(preg_match('/^\[([a-z_]+)\]$/',$href,$matches)){
                $val[]  =   $data2[$matches[1]];
            }else{
                $show   =   isset($array[1])?$array[1]:$value;
                // 替换系统特殊字符串
                $href	=	str_replace(
                    array('[DELETE]','[EDIT]','[MODEL]'),
                    array('del?ids=[id]&model=[MODEL]','edit?id=[id]&model=[MODEL]',$model['id']),
                    $href);

                // 替换数据变量
                $href	=	preg_replace_callback('/\[([a-z_]+)\]/', function($match) use($data){return $data[$match[1]];}, $href);

                $val[]	=	'<a href="'.U($href).'">'.$show.'</a>';
            }
        }
        $value  =   implode(' ',$val);
	}
    return $value;
}

// 获取模型名称
function get_model_by_id($id){
    return $model = M('Model')->getFieldById($id,'title');
}

// 获取属性类型信息
function get_attribute_type($type=''){
    // TODO 可以加入系统配置
    static $_type = array(
        'num'       =>  array('数字','int(10) UNSIGNED NOT NULL'),
        'string'    =>  array('字符串','varchar(255) NOT NULL'),
        'textarea'  =>  array('文本框','text NOT NULL'),
        'datetime'  =>  array('时间','int(10) NOT NULL'),
        'bool'      =>  array('布尔','tinyint(2) NOT NULL'),
        'select'    =>  array('枚举','char(50) NOT NULL'),
    	'radio'		=>	array('单选','char(10) NOT NULL'),
    	'checkbox'	=>	array('多选','varchar(100) NOT NULL'),
    	'editor'    =>  array('编辑器','text NOT NULL'),
    	'picture'   =>  array('上传图片','int(10) UNSIGNED NOT NULL'),
    	'file'    	=>  array('上传附件','int(10) UNSIGNED NOT NULL'),
    );
    return $type?$_type[$type][0]:$_type;
}

/**
 * 获取对应状态的文字信息
 * @param int $status
 * @return string 状态文字 ，false 未获取到
 * @author huajie <banhuajie@163.com>
 */
function get_status_title($status = null){
    if(!isset($status)){
        return false;
    }
    switch ($status){
        case -1 : return    '已删除';   break;
        case 0  : return    '禁用';     break;
        case 1  : return    '正常';     break;
        case 2  : return    '待审核';   break;
        default : return    false;      break;
    }
}

// 获取数据的状态操作
function show_status_op($status) {
    switch ($status){
        case 0  : return    '启用';     break;
        case 1  : return    '禁用';     break;
        case 2  : return    '审核';		break;
        default : return    false;      break;
    }
}

/**
 * 获取文档的类型文字
 * @param string $type
 * @return string 状态文字 ，false 未获取到
 * @author huajie <banhuajie@163.com>
 */
function get_document_type($type = null){
    if(!isset($type)){
        return false;
    }
    switch ($type){
        case 1  : return    '目录'; break;
        case 2  : return    '主题'; break;
        case 3  : return    '段落'; break;
        default : return    false;  break;
    }
}

/**
 * 获取配置的类型
 * @param string $type 配置类型
 * @return string
 */
function get_config_type($type=0){
    $list = C('CONFIG_TYPE_LIST');
    return $list[$type];
}

/**
 * 获取配置的分组
 * @param string $group 配置分组
 * @return string
 */
function get_config_group($group=0){
    $list = C('CONFIG_GROUP_LIST');
    return $group?$list[$group]:'';
}

/**
 * select返回的数组进行整数映射转换
 *
 * @param array $map  映射关系二维数组  array(
 *                                          '字段名1'=>array(映射关系数组),
 *                                          '字段名2'=>array(映射关系数组),
 *                                           ......
 *                                       )
 * @author 朱亚杰 <zhuyajie@topthink.net>
 * @return array
 *
 *  array(
 *      array('id'=>1,'title'=>'标题','status'=>'1','status_text'=>'正常')
 *      ....
 *  )
 *
 */
function int_to_string(&$data,$map=array('status'=>array(1=>'正常',-1=>'删除',0=>'禁用',2=>'未审核',3=>'草稿'))) {
    if($data === false || $data === null ){
        return $data;
    }
    $data = (array)$data;
    foreach ($data as $key => $row){
        foreach ($map as $col=>$pair){
            if(isset($row[$col]) && isset($pair[$row[$col]])){
                $data[$key][$col.'_text'] = $pair[$row[$col]];
            }
        }
    }
    return $data;
}

/**
 * 动态扩展左侧菜单,base.html里用到
 * @author 朱亚杰 <zhuyajie@topthink.net>
 */
function extra_menu($extra_menu,&$base_menu){
    foreach ($extra_menu as $key=>$group){
        if( isset($base_menu['child'][$key]) ){
            $base_menu['child'][$key] = array_merge( $base_menu['child'][$key], $group);
        }else{
            $base_menu['child'][$key] = $group;
        }
    }
}

/**
 * 获取参数的所有父级分类
 * @param int $cid 分类id
 * @return array 参数分类和父类的信息集合
 * @author huajie <banhuajie@163.com>
 */
function get_parent_category($cid){
    if(empty($cid)){
        return false;
    }
    $cates  =   M('Category')->where(array('status'=>1))->field('id,title,pid')->order('sort')->select();
    $child  =   get_category($cid);	//获取参数分类的信息
    $pid    =   $child['pid'];
    $temp   =   array();
    $res[]  =   $child;
    while(true){
        foreach ($cates as $key=>$cate){
            if($cate['id'] == $pid){
                $pid = $cate['pid'];
                array_unshift($res, $cate);	//将父分类插入到数组第一个元素前
            }
        }
        if($pid == 0){
            break;
        }
    }
    return $res;
}

/**
 * 检测验证码
 * @param  integer $id 验证码ID
 * @return boolean     检测结果
 * @author 麦当苗儿 <zuojiazi@vip.qq.com>
 */
function check_verify($code, $id = 1){
    $verify = new \Think\Verify();
    return $verify->check($code, $id);
}

/**
 * 获取当前分类的文档类型
 * @param int $id
 * @return array 文档类型数组
 * @author huajie <banhuajie@163.com>
 */
function get_type_bycate($id = null){
    if(empty($id)){
        return false;
    }
    $type_list  =   C('DOCUMENT_MODEL_TYPE');
    $model_type =   M('Category')->getFieldById($id, 'type');
    $model_type =   explode(',', $model_type);
    foreach ($type_list as $key=>$value){
        if(!in_array($key, $model_type)){
            unset($type_list[$key]);
        }
    }
    return $type_list;
}

/**
 * 获取当前文档的分类
 * @param int $id
 * @return array 文档类型数组
 * @author huajie <banhuajie@163.com>
 */
function get_cate($cate_id = null){
    if(empty($cate_id)){
        return false;
    }
    $cate   =   M('Category')->where('id='.$cate_id)->getField('title');
    return $cate;
}

 // 分析枚举类型配置值 格式 a:名称1,b:名称2
function parse_config_attr($string) {
    $array = preg_split('/[,;\r\n]+/', trim($string, ",;\r\n"));
    if(strpos($string,':')){
        $value  =   array();
        foreach ($array as $val) {
            list($k, $v) = explode(':', $val);
            $value[$k]   = $v;
        }
    }else{
        $value  =   $array;
    }
    return $value;
}

// 获取子文档数目
function get_subdocument_count($id=0){
    return  M('Document')->where('pid='.$id)->count();
}



 // 分析枚举类型字段值 格式 a:名称1,b:名称2
 // 暂时和 parse_config_attr功能相同
 // 但请不要互相使用，后期会调整
function parse_field_attr($string) {
    if(0 === strpos($string,':')){
        // 采用函数定义
        return   eval(substr($string,1).';');
    }
    $array = preg_split('/[,;\r\n]+/', trim($string, ",;\r\n"));
    if(strpos($string,':')){
        $value  =   array();
        foreach ($array as $val) {
            list($k, $v) = explode(':', $val);
            $value[$k]   = $v;
        }
    }else{
        $value  =   $array;
    }
    return $value;
}

/**
 * 获取行为数据
 * @param string $id 行为id
 * @param string $field 需要获取的字段
 * @author huajie <banhuajie@163.com>
 */
function get_action($id = null, $field = null){
	if(empty($id) && !is_numeric($id)){
		return false;
	}
	$list = S('action_list');
	if(empty($list[$id])){
		$map = array('status'=>array('gt', -1), 'id'=>$id);
		$list[$id] = M('Action')->where($map)->field(true)->find();
	}
	return empty($field) ? $list[$id] : $list[$id][$field];
}

/**
 * 根据条件字段获取数据
 * @param mixed $value 条件，可用常量或者数组
 * @param string $condition 条件字段
 * @param string $field 需要返回的字段，不传则返回整个数据
 * @author huajie <banhuajie@163.com>
 */
function get_document_field($value = null, $condition = 'id', $field = null){
	if(empty($value)){
		return false;
	}

	//拼接参数
	$map[$condition] = $value;
	$info = M('Model')->where($map);
	if(empty($field)){
		$info = $info->field(true)->find();
	}else{
		$info = $info->getField($field);
	}
	return $info;
}

/**
 * 获取行为类型
 * @param intger $type 类型
 * @param bool $all 是否返回全部类型
 * @author huajie <banhuajie@163.com>
 */
function get_action_type($type, $all = false){
	$list = array(
		1=>'系统',
		2=>'用户',
	);
	if($all){
		return $list;
	}
	return $list[$type];
}

/**
 * 获取汉字的拼音模式
 * @author 么宗磊 
 *用法：
 *第二个参数留空则为gb1232编码 例：Pinyin('PHP100中文网');
 *第二个参数随意设置则为utf-8编码 例：Pinyin('张恩民',1);
 */
function Pinyin($_String, $_Code='gb2312')
{
	$_DataKey = "a|ai|an|ang|ao|ba|bai|ban|bang|bao|bei|ben|beng|bi|bian|biao|bie|bin|bing|bo|bu|ca|cai|can|cang|cao|ce|ceng|cha".
	"|chai|chan|chang|chao|che|chen|cheng|chi|chong|chou|chu|chuai|chuan|chuang|chui|chun|chuo|ci|cong|cou|cu|".
	"cuan|cui|cun|cuo|da|dai|dan|dang|dao|de|deng|di|dian|diao|die|ding|diu|dong|dou|du|duan|dui|dun|duo|e|en|er".
	"|fa|fan|fang|fei|fen|feng|fo|fou|fu|ga|gai|gan|gang|gao|ge|gei|gen|geng|gong|gou|gu|gua|guai|guan|guang|gui".
	"|gun|guo|ha|hai|han|hang|hao|he|hei|hen|heng|hong|hou|hu|hua|huai|huan|huang|hui|hun|huo|ji|jia|jian|jiang".
	"|jiao|jie|jin|jing|jiong|jiu|ju|juan|jue|jun|ka|kai|kan|kang|kao|ke|ken|keng|kong|kou|ku|kua|kuai|kuan|kuang".
	"|kui|kun|kuo|la|lai|lan|lang|lao|le|lei|leng|li|lia|lian|liang|liao|lie|lin|ling|liu|long|lou|lu|lv|luan|lue".
	"|lun|luo|ma|mai|man|mang|mao|me|mei|men|meng|mi|mian|miao|mie|min|ming|miu|mo|mou|mu|na|nai|nan|nang|nao|ne".
	"|nei|nen|neng|ni|nian|niang|niao|nie|nin|ning|niu|nong|nu|nv|nuan|nue|nuo|o|ou|pa|pai|pan|pang|pao|pei|pen".
	"|peng|pi|pian|piao|pie|pin|ping|po|pu|qi|qia|qian|qiang|qiao|qie|qin|qing|qiong|qiu|qu|quan|que|qun|ran|rang".
	"|rao|re|ren|reng|ri|rong|rou|ru|ruan|rui|run|ruo|sa|sai|san|sang|sao|se|sen|seng|sha|shai|shan|shang|shao|".
	"she|shen|sheng|shi|shou|shu|shua|shuai|shuan|shuang|shui|shun|shuo|si|song|sou|su|suan|sui|sun|suo|ta|tai|".
	"tan|tang|tao|te|teng|ti|tian|tiao|tie|ting|tong|tou|tu|tuan|tui|tun|tuo|wa|wai|wan|wang|wei|wen|weng|wo|wu".
	"|xi|xia|xian|xiang|xiao|xie|xin|xing|xiong|xiu|xu|xuan|xue|xun|ya|yan|yang|yao|ye|yi|yin|ying|yo|yong|you".
	"|yu|yuan|yue|yun|za|zai|zan|zang|zao|ze|zei|zen|zeng|zha|zhai|zhan|zhang|zhao|zhe|zhen|zheng|zhi|zhong|".
	"zhou|zhu|zhua|zhuai|zhuan|zhuang|zhui|zhun|zhuo|zi|zong|zou|zu|zuan|zui|zun|zuo";
	$_DataValue = "-20319|-20317|-20304|-20295|-20292|-20283|-20265|-20257|-20242|-20230|-20051|-20036|-20032|-20026|-20002|-19990".
	"|-19986|-19982|-19976|-19805|-19784|-19775|-19774|-19763|-19756|-19751|-19746|-19741|-19739|-19728|-19725".
	"|-19715|-19540|-19531|-19525|-19515|-19500|-19484|-19479|-19467|-19289|-19288|-19281|-19275|-19270|-19263".
	"|-19261|-19249|-19243|-19242|-19238|-19235|-19227|-19224|-19218|-19212|-19038|-19023|-19018|-19006|-19003".
	"|-18996|-18977|-18961|-18952|-18783|-18774|-18773|-18763|-18756|-18741|-18735|-18731|-18722|-18710|-18697".
	"|-18696|-18526|-18518|-18501|-18490|-18478|-18463|-18448|-18447|-18446|-18239|-18237|-18231|-18220|-18211".
	"|-18201|-18184|-18183|-18181|-18012|-17997|-17988|-17970|-17964|-17961|-17950|-17947|-17931|-17928|-17922".
	"|-17759|-17752|-17733|-17730|-17721|-17703|-17701|-17697|-17692|-17683|-17676|-17496|-17487|-17482|-17468".
	"|-17454|-17433|-17427|-17417|-17202|-17185|-16983|-16970|-16942|-16915|-16733|-16708|-16706|-16689|-16664".
	"|-16657|-16647|-16474|-16470|-16465|-16459|-16452|-16448|-16433|-16429|-16427|-16423|-16419|-16412|-16407".
	"|-16403|-16401|-16393|-16220|-16216|-16212|-16205|-16202|-16187|-16180|-16171|-16169|-16158|-16155|-15959".
	"|-15958|-15944|-15933|-15920|-15915|-15903|-15889|-15878|-15707|-15701|-15681|-15667|-15661|-15659|-15652".
	"|-15640|-15631|-15625|-15454|-15448|-15436|-15435|-15419|-15416|-15408|-15394|-15385|-15377|-15375|-15369".
	"|-15363|-15362|-15183|-15180|-15165|-15158|-15153|-15150|-15149|-15144|-15143|-15141|-15140|-15139|-15128".
	"|-15121|-15119|-15117|-15110|-15109|-14941|-14937|-14933|-14930|-14929|-14928|-14926|-14922|-14921|-14914".
	"|-14908|-14902|-14894|-14889|-14882|-14873|-14871|-14857|-14678|-14674|-14670|-14668|-14663|-14654|-14645".
	"|-14630|-14594|-14429|-14407|-14399|-14384|-14379|-14368|-14355|-14353|-14345|-14170|-14159|-14151|-14149".
	"|-14145|-14140|-14137|-14135|-14125|-14123|-14122|-14112|-14109|-14099|-14097|-14094|-14092|-14090|-14087".
	"|-14083|-13917|-13914|-13910|-13907|-13906|-13905|-13896|-13894|-13878|-13870|-13859|-13847|-13831|-13658".
	"|-13611|-13601|-13406|-13404|-13400|-13398|-13395|-13391|-13387|-13383|-13367|-13359|-13356|-13343|-13340".
	"|-13329|-13326|-13318|-13147|-13138|-13120|-13107|-13096|-13095|-13091|-13076|-13068|-13063|-13060|-12888".
	"|-12875|-12871|-12860|-12858|-12852|-12849|-12838|-12831|-12829|-12812|-12802|-12607|-12597|-12594|-12585".
	"|-12556|-12359|-12346|-12320|-12300|-12120|-12099|-12089|-12074|-12067|-12058|-12039|-11867|-11861|-11847".
	"|-11831|-11798|-11781|-11604|-11589|-11536|-11358|-11340|-11339|-11324|-11303|-11097|-11077|-11067|-11055".
	"|-11052|-11045|-11041|-11038|-11024|-11020|-11019|-11018|-11014|-10838|-10832|-10815|-10800|-10790|-10780".
	"|-10764|-10587|-10544|-10533|-10519|-10331|-10329|-10328|-10322|-10315|-10309|-10307|-10296|-10281|-10274".
	"|-10270|-10262|-10260|-10256|-10254";
	$_TDataKey = explode('|', $_DataKey);
	$_TDataValue = explode('|', $_DataValue);
	$_Data = (PHP_VERSION>='5.0') ? array_combine($_TDataKey, $_TDataValue) : _Array_Combine($_TDataKey, $_TDataValue);
	arsort($_Data);
	reset($_Data);
	if($_Code != 'gb2312') $_String = _U2_Utf8_Gb($_String);
	$_Res = '';
	for($i=0; $i<strlen($_String); $i++)
	{
		$_P = ord(substr($_String, $i, 1));
		if($_P>160) { $_Q = ord(substr($_String, ++$i, 1)); $_P = $_P*256 + $_Q - 65536; }
		$_Res .= _Pinyin($_P, $_Data);
	}
	return preg_replace("/[^a-zA-Z0-9]*/", '', $_Res);
}
function _Pinyin($_Num, $_Data)
{
	if ($_Num>0 && $_Num<160 ) return chr($_Num);
	elseif($_Num<-20319 || $_Num>-10247) return '';
	else {
	foreach($_Data as $k=>$v){ if($v<=$_Num) break; }
	$k = ucfirst($k);
	return $k;
	}
}
function _U2_Utf8_Gb($_C)
{
	$_String = '';
	if($_C < 0x80) $_String .= $_C;
	elseif($_C < 0x800)
	{
	$_String .= chr(0xC0 | $_C>>6);
	$_String .= chr(0x80 | $_C & 0x3F);
	}elseif($_C < 0x10000){
	$_String .= chr(0xE0 | $_C>>12);
	$_String .= chr(0x80 | $_C>>6 & 0x3F);
	$_String .= chr(0x80 | $_C & 0x3F);
	} elseif($_C < 0x200000) {
	$_String .= chr(0xF0 | $_C>>18);
	$_String .= chr(0x80 | $_C>>12 & 0x3F);
	$_String .= chr(0x80 | $_C>>6 & 0x3F);
	$_String .= chr(0x80 | $_C & 0x3F);
	}
	return iconv('UTF-8', 'GB2312', $_String);
}
function _Array_Combine($_Arr1, $_Arr2)
{
	for($i=0; $i<count($_Arr1); $i++) $_Res[$_Arr1[$i]] = $_Arr2[$i];
	return $_Res;
}

//后台车辆列表多条件筛选
function getParamsUrl($addStr){
	//请求参数字符串
	$queryStr=$_SERVER['QUERY_STRING'];
	$queryStr=urldecode($queryStr); 
	
	$query=explode('&',$queryStr);
	
	//新添加参数
	$addQueryArr=explode('=',$addStr);
	$newArray=array();
	
	//将参数字符串转换成一维数组
	foreach($query as $param){
		$p=explode("=",$param);
		$newArray[$p[0]]=$p[1];
	}
	
	//特殊处理：录入、修改、更新、下线时间 
	if($addQueryArr[0]=="create_time" && $addQueryArr[1]=='' && array_key_exists('create_time_start',$newArray) && array_key_exists('create_time_end',$newArray)){
		unset($newArray['create_time_start']);
		unset($newArray['create_time_end']);
	}
	if($addQueryArr[0]=="update_time" && $addQueryArr[1]=='' && array_key_exists('update_time_start',$newArray) && array_key_exists('update_time_end',$newArray)){
		unset($newArray['update_time_start']);
		unset($newArray['update_time_end']);
	}
	if($addQueryArr[0]=="online_time" && $addQueryArr[1]=='' && array_key_exists('online_time_start',$newArray) && array_key_exists('online_time_end',$newArray)){
		unset($newArray['online_time_start']);
		unset($newArray['online_time_end']);
	}
	
	if($addQueryArr[0]=="offline_time" && $addQueryArr[1]=='' && array_key_exists('offline_time_start',$newArray) && array_key_exists('offline_time_end',$newArray)){
		unset($newArray['offline_time_start']);
		unset($newArray['offline_time_end']);
	}
	
	
	$i=0;
	foreach($newArray as $key=>&$value){
		 if($key==$addQueryArr[0]){
			$value=$addQueryArr[1];
		 }else{
			$i++;	
		 }
	}
	
	
	if($i>0){
		$newArray[$addQueryArr[0]]=$addQueryArr[1];
	}
	
	
	
	//过滤URL中值为空的参数
	// $tmpArr=array();
	// foreach($newArray as $key => $value){
		// if($value!=''){
			// $tmpArr[$key]=$value;
		// }
	// }
	
	//分析上一次URL
	$refer=$_SERVER['HTTP_REFERER'];
	$referUrl=parse_url($refer);
	$referQuery=$referUrl['query'];
	
	$tmpArr=array();
	if($referQuery!=''){
		$referQuery.="&";
		$referArr=explode('&',$referQuery);
		array_pop($referArr);
		
		foreach($referArr as $key){
			$p=explode("=",$key);
			$tmpArr[$p[0]]=$p[1];
		}
	}
	
	
	
	$referBrand=0;
	if(array_key_exists('brand',$tmpArr)){
		$referBrand=$tmpArr['brand'];
	}
	
	foreach($newArray as $key => &$value){
		//特殊处理：当品牌为空的时候，车系必须为空
		if($key=='brand' && $value==''){
			$newArray['model']='';
		}else{
			//特殊处理：更换品牌的时候，车系必须为空
			if($referBrand){
				if($key=='brand' && $referBrand!=$value){
					$newArray['model']='';
				}
			}	
		}
	}

	//去除独立搜索条件
	if(array_key_exists('stype',$newArray)){
		unset($newArray['stype']);
	}
	if(array_key_exists('keywords',$newArray)){
		unset($newArray['keywords']);
	}
	if(array_key_exists('p',$newArray)){
		unset($newArray['p']);
	}
	
	$query=http_build_query($newArray);
	$query=urldecode($query);
	if(strlen($query)>0){
		echo '/admin-business-index?'.$query;
	}else{
		echo '/admin-business-index';
	}
}

//后台伪车辆列表多条件筛选
function getParamsUrlBoot($addStr){
	//请求参数字符串
	$queryStr=$_SERVER['QUERY_STRING'];
	$queryStr=urldecode($queryStr); 
	
	$query=explode('&',$queryStr);
	
	//新添加参数
	$addQueryArr=explode('=',$addStr);
	$newArray=array();
	
	//将参数字符串转换成一维数组
	foreach($query as $param){
		$p=explode("=",$param);
		$newArray[$p[0]]=$p[1];
	}
	
	//特殊处理：录入、修改、更新、下线时间 
	if($addQueryArr[0]=="create_time" && $addQueryArr[1]=='' && array_key_exists('create_time_start',$newArray) && array_key_exists('create_time_end',$newArray)){
		unset($newArray['create_time_start']);
		unset($newArray['create_time_end']);
	}
	if($addQueryArr[0]=="update_time" && $addQueryArr[1]=='' && array_key_exists('update_time_start',$newArray) && array_key_exists('update_time_end',$newArray)){
		unset($newArray['update_time_start']);
		unset($newArray['update_time_end']);
	}
	if($addQueryArr[0]=="online_time" && $addQueryArr[1]=='' && array_key_exists('online_time_start',$newArray) && array_key_exists('online_time_end',$newArray)){
		unset($newArray['online_time_start']);
		unset($newArray['online_time_end']);
	}
	
	if($addQueryArr[0]=="offline_time" && $addQueryArr[1]=='' && array_key_exists('offline_time_start',$newArray) && array_key_exists('offline_time_end',$newArray)){
		unset($newArray['offline_time_start']);
		unset($newArray['offline_time_end']);
	}
	
	
	$i=0;
	foreach($newArray as $key=>&$value){
		 if($key==$addQueryArr[0]){
			$value=$addQueryArr[1];
		 }else{
			$i++;	
		 }
	}
	
	
	if($i>0){
		$newArray[$addQueryArr[0]]=$addQueryArr[1];
	}
	
	
	
	//过滤URL中值为空的参数
	// $tmpArr=array();
	// foreach($newArray as $key => $value){
		// if($value!=''){
			// $tmpArr[$key]=$value;
		// }
	// }
	
	//分析上一次URL
	$refer=$_SERVER['HTTP_REFERER'];
	$referUrl=parse_url($refer);
	$referQuery=$referUrl['query'];
	
	$tmpArr=array();
	if($referQuery!=''){
		$referQuery.="&";
		$referArr=explode('&',$referQuery);
		array_pop($referArr);
		
		foreach($referArr as $key){
			$p=explode("=",$key);
			$tmpArr[$p[0]]=$p[1];
		}
	}
	
	
	
	$referBrand=0;
	if(array_key_exists('brand',$tmpArr)){
		$referBrand=$tmpArr['brand'];
	}
	
	foreach($newArray as $key => &$value){
		//特殊处理：当品牌为空的时候，车系必须为空
		if($key=='brand' && $value==''){
			$newArray['model']='';
		}else{
			//特殊处理：更换品牌的时候，车系必须为空
			if($referBrand){
				if($key=='brand' && $referBrand!=$value){
					$newArray['model']='';
				}
			}	
		}
	}

	//去除独立搜索条件
	if(array_key_exists('stype',$newArray)){
		unset($newArray['stype']);
	}
	if(array_key_exists('keywords',$newArray)){
		unset($newArray['keywords']);
	}
	if(array_key_exists('p',$newArray)){
		unset($newArray['p']);
	}
	
	$query=http_build_query($newArray);
	$query=urldecode($query);
	if(strlen($query)>0){
		echo '/admin-business-boot?'.$query;
	}else{
		echo '/admin-business-boot';
	}
}



//后台伪车辆列表多条件筛选
function getParamsUrlRecycle($addStr){
	//请求参数字符串
	$queryStr=$_SERVER['QUERY_STRING'];
	$queryStr=urldecode($queryStr); 
	
	$query=explode('&',$queryStr);
	
	//新添加参数
	$addQueryArr=explode('=',$addStr);
	$newArray=array();
	
	//将参数字符串转换成一维数组
	foreach($query as $param){
		$p=explode("=",$param);
		$newArray[$p[0]]=$p[1];
	}
	
	//特殊处理：录入、修改、更新、下线时间 
	if($addQueryArr[0]=="create_time" && $addQueryArr[1]=='' && array_key_exists('create_time_start',$newArray) && array_key_exists('create_time_end',$newArray)){
		unset($newArray['create_time_start']);
		unset($newArray['create_time_end']);
	}
	if($addQueryArr[0]=="update_time" && $addQueryArr[1]=='' && array_key_exists('update_time_start',$newArray) && array_key_exists('update_time_end',$newArray)){
		unset($newArray['update_time_start']);
		unset($newArray['update_time_end']);
	}
	if($addQueryArr[0]=="online_time" && $addQueryArr[1]=='' && array_key_exists('online_time_start',$newArray) && array_key_exists('online_time_end',$newArray)){
		unset($newArray['online_time_start']);
		unset($newArray['online_time_end']);
	}
	
	if($addQueryArr[0]=="offline_time" && $addQueryArr[1]=='' && array_key_exists('offline_time_start',$newArray) && array_key_exists('offline_time_end',$newArray)){
		unset($newArray['offline_time_start']);
		unset($newArray['offline_time_end']);
	}
	
	
	$i=0;
	foreach($newArray as $key=>&$value){
		 if($key==$addQueryArr[0]){
			$value=$addQueryArr[1];
		 }else{
			$i++;	
		 }
	}
	
	
	if($i>0){
		$newArray[$addQueryArr[0]]=$addQueryArr[1];
	}

	
	//分析上一次URL
	$refer=$_SERVER['HTTP_REFERER'];
	$referUrl=parse_url($refer);
	$referQuery=$referUrl['query'];
	
	$tmpArr=array();
	if($referQuery!=''){
		$referQuery.="&";
		$referArr=explode('&',$referQuery);
		array_pop($referArr);
		
		foreach($referArr as $key){
			$p=explode("=",$key);
			$tmpArr[$p[0]]=$p[1];
		}
	}
	
	
	
	$referBrand=0;
	if(array_key_exists('brand',$tmpArr)){
		$referBrand=$tmpArr['brand'];
	}
	
	foreach($newArray as $key => &$value){
		//特殊处理：当品牌为空的时候，车系必须为空
		if($key=='brand' && $value==''){
			$newArray['model']='';
		}else{
			//特殊处理：更换品牌的时候，车系必须为空
			if($referBrand){
				if($key=='brand' && $referBrand!=$value){
					$newArray['model']='';
				}
			}	
		}
	}

	//去除独立搜索条件
	if(array_key_exists('stype',$newArray)){
		unset($newArray['stype']);
	}
	if(array_key_exists('keywords',$newArray)){
		unset($newArray['keywords']);
	}
	if(array_key_exists('p',$newArray)){
		unset($newArray['p']);
	}
	
	$query=http_build_query($newArray);
	$query=urldecode($query);
	
	if(strlen($query)>0){
		echo '/admin-business-recycle?'.$query;
		file_put_contents("E:/testlog.txt", '/admin-business-recycle?'.$query."\r\n",FILE_APPEND );
	}else{
		echo '/admin-business-recycle';
		file_put_contents("E:/testlog.txt", '/admin-business-recycle?'.$query."\r\n",FILE_APPEND );
	}
}
//后台车辆列表已选条件高亮
function getClassOn($addStr){
	//请求参数字符串
	$queryStr=$_SERVER['QUERY_STRING'];
	$query=explode('&',$queryStr);
	
	//新添加参数
	$addQueryArr=explode('=',$addStr);
	$newArr=array();
	$tmpArr=array();
	
	foreach($query as $param){
		$p=explode("=",$param);
		$tmpArr[$p[0]]=$p[1];
	}
	

	
	if(empty($query)){
		if($addQueryArr[1]==''){
			echo "class='on'";
		}
	}else{
		foreach($query as $param){
			$p=explode("=",$param);
			$newArray[$p[0]]=$p[1];
			
			if($param==$addStr){
				echo "class='on'";
			}
		}
		
		//没有参数时，不限默认选中	
		if(!array_key_exists($addQueryArr[0],$newArray) && $addQueryArr[1]==''){
			//特殊处理：录入、修改、更新、下线时间 
			if($addQueryArr[0]=="create_time"  && array_key_exists('create_time_start',$newArray) && array_key_exists('create_time_end',$newArray)){
				echo "";
			}elseif($addQueryArr[0]=="update_time" && array_key_exists('update_time_start',$newArray) && array_key_exists('update_time_end',$newArray)){
				echo "";
			}elseif($addQueryArr[0]=="online_time" && array_key_exists('online_time_start',$newArray) && array_key_exists('online_time_end',$newArray)){
				echo "";
			}elseif($addQueryArr[0]=="offline_time" && array_key_exists('offline_time_start',$newArray) && array_key_exists('offline_time_end',$newArray)){
				echo "";
			}else{
				echo "class='on'";
			}
			
			
		}
	}
}

//根据品牌ID取得品牌的名字
function  getNameByBrandId($brand_id){
	if($brand_id==''){
		return ;
	}else{
		$mod=M('car_model');
		$condition=array();
		$condition['id']=$brand_id;
		
		$result=$mod->field('name')->where($condition)->find();
		return $result['name'];
	}
}


//后台租车信息列表 根据参数名，参数值取得对应的真实名称
function getNameByParam($k,$v){
	switch($k){
		case "city_name": //城市
			switch($v){
				case 1:
					return "北京";
				break;
				case 2:
					return "上海";
				break;
				case 3:
					return "天津";
				break;
				case 4:
					return "重庆";
				break;
				case 5:
					return "广州";
				break;
				case 6:
					return "深圳";
				break;
				case 115:
					return "郑州";
				break;
				case "rests":
					return "其他城市";
				break;	
			}
		break;
		
		case "rent_type": //发布方式
			switch($v){
				case 1:
					return "委托";
				break;	
				case 2:
					return "自助";
				break;		
			}
		break;
		
		case "pre_publish_type": //审核状态
			switch($v){
				case 1:
					return "信息未提交";
				break;
				case 2:
					return "信息待审核";
				break;
				case 3:
					return "信息已驳回";
				break;
				case 4:
					return "信息待上线";
				break;
				case 5:
					return "信息已上线";
				break;
				case 6:
					return "信息已下线";
				break;
			}
		break;
		
		case "brand": //品牌
			$mod=M('car_model');
			$condition=array();
			$condition['id']=$v;
			$result=$mod->field('name')->where($condition)->find();
			return $result['name'];$mod=M('car_model');
			$condition=array();
			$condition['id']=$v;
			$result=$mod->field('name')->where($condition)->find();
			return $result['name'];
		break;
		
		case "model"://车系
			$mod=M('car_model');
			$condition=array();
			$condition['id']=$v;
			$condition['parent_id']=array('neq',0);
			$result=$mod->field('name')->where($condition)->find();
			return $result['name'];
		break;	
		
		case "price_type"://租金
			switch($v){
				case 1:
					return "0-149元";
				break;
				case 2:
					return "150-299元";
				break;
				case 3:
					return "300-499元";
				break;
				case 4:
					return "500元以上";
				break;				
			}
		break;
		
		case "time_type":
			switch($v){
				case 1:
					return "今天";
				break;
				case 2:
					return "昨天";
				break;
				case 3:
					return "本周";
				break;
				case 4:
					return "本月";
				break;	
			}
		break;
		
		case "recommend_levels":
			switch($v){
				case 1:
					return "推荐背景";
				break;
				case 2:
					return "推荐轮播";
				break;
				}
		break;
			
	}
	
}

//后台租车信息列表 消减参数搜索
function getLinkByDelParam($queryStr,$param){
	$queryArr=explode("&",$queryStr);
	$paramArr=explode("=",$param);
	$newArr=array();
	
	foreach($queryArr as $value){
		$p=explode('=',$value);
		$newArr[$p[0]]=$p[1];
	}
	
	foreach($newArr as $k=>$v){
		if($k==$paramArr[0]){ //存在相同的参数，则删除参数
		
			//特殊处理，删除品牌时候，需要删除车系
			if($k=='brand'){
				unset($newArr['model']);
			}
			unset($newArr[$k]);
		}
	}
	
	//特殊处理，删除录入、更新、上线、下线
	if($paramArr[0]=="create_time" && array_key_exists('create_time_start',$newArr) && array_key_exists('create_time_end',$newArr)){
		unset($newArr['create_time_start']);
		unset($newArr['create_time_end']);
	}
	if($paramArr[0]=="update_time" && array_key_exists('update_time_start',$newArr) && array_key_exists('update_time_end',$newArr)){
		unset($newArr['update_time_start']);
		unset($newArr['update_time_end']);
	}
	if($paramArr[0]=="online_time" && array_key_exists('online_time_start',$newArr) && array_key_exists('online_time_end',$newArr)){
		unset($newArr['online_time_start']);
		unset($newArr['online_time_end']);
	}
	if($paramArr[0]=="offline_time" && array_key_exists('offline_time_start',$newArr) && array_key_exists('offline_time_end',$newArr)){
		unset($newArr['offline_time_start']);
		unset($newArr['offline_time_end']);
	}
	
	$urlQuery=http_build_query($newArr);
	if(strlen($urlQuery)>0){
		$url='/admin-business-index?'.$urlQuery;
	}else{
		$url='/admin-business-index';
	}
	return $url; 
}


/**
 * 作用：后台审核用户证件状态时同步到Member表个人证件状态
 *	@param int $uid 用户id
 *	@param int $uid 用户id
 *	@param int $verifyType 验证类型 1身份证、2驾驶证、3信用卡、4驾客身份证
 *	@param int $status 0驳回 1提交 2通过
 *	@return bool
 *	@author jie365@126.com	 
 *
*/

function updateMemberVerifyStatus($uid,$verifyType,$status){
	//获取用户证件的状态   
	//三证审核状态1000000 从尾数向前分别代表 身份证、驾驶证、信用卡通过状态，0未提交 1已提交 2 已通过 3已驳回
	$mod=M('Member');
    $condition['verify_status'] = ['lt',1000000];
    $data['verify_status'] = ['exp',"verify_status+1000000"];
    $mod->where($condition)->save($data);

	$condition=array();
	$condition['uid']=array('eq',$uid);
	$statusArr=$mod->field('verify_status')->where($condition)->find();
	$statusStr=$statusArr['verify_status'];
	
	//同步用户的证件审核状态
	$data=array();
	if($verifyType==1){
		if($status==0){//驳回
			$data['verify_status']=substr_replace($statusStr,3,-1,1);
		}
		if($status==1){//待审
			$data['verify_status']=substr_replace($statusStr,1,-1,1);
		}
		if($status==2){//通过 
			$data['verify_status']=substr_replace($statusStr,2,-1,1);
		}
	}elseif($verifyType==2){
		if($status==0){//驳回
			$data['verify_status']=substr_replace($statusStr,3,-2,1);
		}
		if($status==1){//待审
			$data['verify_status']=substr_replace($statusStr,1,-2,1);
		}
		if($status==2){//通过 
			$data['verify_status']=substr_replace($statusStr,2,-2,1);
		}
	}elseif($verifyType==3){
		if($status==0){//驳回
			$data['verify_status']=substr_replace($statusStr,3,-3,1);
		}
		if($status==1){//待审
			$data['verify_status']=substr_replace($statusStr,1,-3,1);
		}
		if($status==2){//通过 
			$data['verify_status']=substr_replace($statusStr,2,-3,1);
		}
	}elseif($verifyType==4){
	
		if($status==0){//驳回
			$data['verify_status']=substr_replace($statusStr,3,-4,1);
		}
		if($status==1){//待审
			$data['verify_status']=substr_replace($statusStr,1,-4,1);
		}
		if($status==2){//通过 
			$data['verify_status']=substr_replace($statusStr,2,-4,1);
		}
	}else{
		$data=array();
	}
		if($data['verify_status']<1000000){
			$data['verify_status']+=1000000;
		}
	
	if($mod->where($condition)->save($data)){
		return true;
	}else{
		return false;
	}
}

function getCurUrl(){ 
	if(!empty($_SERVER["REQUEST_URI"])){ 
		$scrtName = $_SERVER["REQUEST_URI"]; 
		$nowurl = $scrtName; 
		}else{ 
		$scrtName = $_SERVER["PHP_SELF"]; 
		if(empty($_SERVER["QUERY_STRING"])){ 
		$nowurl = $scrtName; 
		}else{ 
		$nowurl = $scrtName."?".$_SERVER["QUERY_STRING"]; 
		} 
	}
	
	$nowurl=trim($nowurl,'?');
	$nowurl=trim($nowurl,'&');
	return $nowurl; 
}

/*
	简洁分页样式
*/
function simple_page($num,$count,$limit,$parameter,$current = 'current',$unit_name='')
{
	$Page       = new \Think\Page($count,$limit,$parameter);
	$Page->rollPage = $num;

	$Page ->setConfig(next, "下一页");
	$Page ->setConfig(prev, "上一页");
	//$Page ->setConfig(first, "1...");
	//$Page ->setConfig(last, "...%TOTAL_PAGE%");
	
	if($unit_name==''){
		$unit_name="辆车";
	}
	
	$Page ->setConfig(theme, "%FIRST% %UP_PAGE%  <span class='rows'>当前 {$current}/".ceil($count/$limit)." 页</span> %DOWN_PAGE% %END% <span class='rows'>共 {$count} {$unit_name}</span>");
	
	//$Page ->setConfig(theme,"%FIRST% %UP_PAGE%  <span class='rows'>当前 {$current}/45 页</span> %DOWN_PAGE% %END%  <span class='rows'>共 {$count} 条记录</span>");
	
	return $Page->bj_show($current);// 分页显示输出
} 


//根据城市ID取得城市名称,接受数组参数
//参数形式:1,2,3
//返回数组 array('1'=>北京...)
function getCityNameById($paramStr){
	$paramArr=explode(',',$paramStr);
	
	$returnArr=array();
	$mod=M("area_city");
	foreach($paramArr as $param){
		$result=$mod->field('name')->where('id='.$param)->find();
		$returnArr[$param]=$result['name'];
	}
	
	return $returnArr;
}




/**
 * 获取当前用户 权限对应的城市ID
 * $city_arr 进行 返回值中的 值的筛选
 * return array(1,2,3) || 339;
 * @author 班布拉
 */
function get_admin_city( $city_arr = '' )
{       
        $root_id = C('USER_ADMINISTRATOR');
        if( $root_id == UID && $_SESSION['admin_group_id'] == 'root') {
            return 339;
        }
        
        $Auth   =   new \Think\Auth();
        $rule_id = $Auth->get_current_rule_id(UID,array('in','1,2'));
        
		
        $group_id = array();
        $user_group_id = $_SESSION['admin_group_id'];
        foreach( $user_group_id as $k=>$v){
                $gid = M()->query("select id from auth_group where find_in_set('{$rule_id}',rules) and id={$v}");
                if( $gid )
                {
                    $group_id[] = $gid[0]['id'];
                }
        }        
        
        $AuthGroupAccess = M('AuthGroupAccess');
        if( is_array($group_id) )
        {
                $group_city = array();
                foreach( $group_id as $k => $v){
                    $map = array(
                        'uid' => UID,
                        'group_id' => $v,
                    );
                    $city_str = $AuthGroupAccess -> where($map) -> find();
                    $city_allow = explode(',',$city_str['city_allow']);
                    $group_city = array_merge( $group_city , $city_allow );
                }
                $group_city = array_unique($group_city);
        }

        if( empty($group_city[0]) )
        {
                $d = M('employee_department')->field('department_id')->where(array('user_id'=>UID))->find();
                if(is_array($d))
                {
                    $department = M('department')->field('city')->where(array('id'=>$d['department_id']))->find();
                    $group_city = explode(',',$department['city']);
                }
        }
        
        if( in_array('339',$group_city) )
        {
            return 339;
        }

        if( empty( $city_arr ) )
        {
                return $group_city;
        }else{
                $city = $group_city;
                if( is_array($city_arr[0]) ){
                        $city = array();
                        foreach( $city_arr as $k=>$v )
                        {
                            foreach( $v as $ctid )
                            {
                                if(in_array($ctid,$group_city))
                                {
                                    $city[] = $ctid;
                                }
                            }
                        }
                } else if ( is_array($city_arr) ){
                        $city = array();
                        foreach( $city_arr as $ctid )
                        {
                            if(in_array($ctid,$group_city))
                            {
                                $city[] = $ctid;
                            }
                        }
                }
                return $city;  
        }
        return false;
}


/*
 * 判断 城市 ID 是否是当前用户权所在的城市ID
 */
function check_group_city($city_id)
{
       $city_arr = get_admin_city();
       if( in_array($city_id,$city_arr) )
       {
           return true;
       }else{
           return false;
       }
}

  
/**
 * 记录行为操作日志
 * param array $data 要添加到日志表log_service_admin的数据
 *
 */
function adminServiceLog($data = array()) {
	$mod = M("LogServiceAdmin");
	if($mod->add($data)){
		return true;
	}else{
		return false;
	}
}

/**
 * @param $Controller   控制器名
 * @param $action       方法名
 * @param $status       默认为false 需要检查 一般不需要传
 * @author 班布拉
 */

function show_power( $Controller,$action,$status=FALSE )
{
        if( FALSE !== $status ) {
            return true;
        }
        
        if(IS_ROOT){
            return true;
        }
        
        $type =  Admin\Model\AuthRuleModel::RULE_URL;
        $mode = 'url';
        
        static $Auth      =   null;
        static $Status    =   array();
        
        $rule  = strtolower( MODULE_NAME.'/'.$Controller.'/'.$action );
        
        if( array_key_exists($rule,$Status) )
        {
            return $Status[$rule];
        }

        if (!$Auth) {
            $Auth       =   new \Think\Auth();
        }

        if(!$Auth->check($rule,UID,$type,$mode)){
            $Status[$rule] = false;
            return false;
        }
        $Status[$rule] = true;
        return true;
        
}